* Ansible Powerplay

  Powerplay allows you to run multiple Ansible playbooks in
  parallel. Depending on how you organize your playbooks,
  this can be a solid win. I basically before this had been
  doing a playbook with multiple includes for other playbooks
  representing different servers in our stack. Playbook launching
  of playbooks is slow and very serial.

  Basically, the playbooks are all contained, 
  so no interdependencies. And in my case, running in the
  cloud, so no reason why they can't be running in parallel

  Powerplay allows you to specify vars common
  to all playbooks, and also vars specific
  to some playbooks so by which you can
  make your setup very DRY.

  All the Ansible playbooks are executed in seperate processes,
  and thus avoiding a number of the "side effects" you would
  normally encounter with running multiple playbooks with
  Ansible includes.

** Features and Cavets
*** Iteration 1
    We are thowing this intital release
    together under time pressure, so we are
    going to leverage tmux for the output
    for now. It will grab all the panes in the
    current window and output to each of them.

    Later, we shall refine this or use direct
    rendering into the text area and eliminate
    reliance of tmux. But for now, this will
    get the job done already.

** DSL Terminology & Documentation
*** DSL
    The DSL is straightforward as possible,
    simple and elegant to allow you to write 
    your Powerplays in a DRY manner.
**** configuration
     You can intersperse configuration blocks
     anywhere, and the expected nested scoping
     will take effect.
**** playbooks
     playbooks are a collection of groups, and
     each group are normally executed serially. This will
     allow you to organize your plays in an intelligent
     manner to deploy and manage resources and assets
     that may have to be done in a serial manner.
**** group
     A group is a collection of books that all execute
     in parallel. Books are required to be independent of
     each other.
**** book
     A book has a direct correspondence to an Ansible
     playbook, and will execute that Yaml file
     given the configuration variables as parameters.

     Here is where var inheritance becomes useful.

** Installation

** Use

** Examples

** Contributing to ansible-powerplay
 
   + Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
   + Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
   + Fork the project.
   + Start a feature/bugfix branch.
   + Commit and push until you are happy with your contribution.
   + Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
   + Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

** Copyright

   Copyright (c) 2016 Fred Mitchell. See LICENSE.txt for
   further details.

** Personal Notes
   This is my personal scratchpad. Please
   ignore what you see after this point,
   as it is not gauranteed to make sense to you
   or to be kept up to date.
*** Tmux commnad to return the ptys and other info
    #+BEGIN_SRC bash
    tmux list-panes -F '#{pane_id} #{pane_tty}'
    tmux list-panes -F '#{pane_id} #{pane_tty} #{pane_right} #{pane_left} #{pane_top} #{pane_bottom}'
    #+END_SRC

